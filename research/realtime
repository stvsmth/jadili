#!/usr/bin/env python3

# https://www.assemblyai.com/blog/real-time-speech-recognition-with-python/

from urllib.parse import urlencode
from configure import auth_key
from pprint import pprint
import asyncio
import base64
import json
import pyaudio
import sys
import wave
import websockets


SAMPLE_RATE = 16000
FRAMES_PER_BUFFER = 3200
FORMAT = pyaudio.paInt16
CHANNELS = 1
RATE = SAMPLE_RATE
p = pyaudio.PyAudio()

stream = p.open(
    format=FORMAT,
    channels=CHANNELS,
    rate=RATE,
    input=True,
    frames_per_buffer=FRAMES_PER_BUFFER,
)

# TODO: Ugh, global
buffer = []

PARAMS = {
    "sample_rate": SAMPLE_RATE,
    "word_boost": json.dumps(["Jadili", "AssemblyAI"]),
}
URL = f"wss://api.assemblyai.com/v2/realtime/ws?{urlencode(PARAMS)}"


def spinning_cursor():
    while True:
        for cursor in "|/-\\":
            yield cursor


def handle_cancel():
    try:
        tasks = asyncio.all_tasks()
        for task in tasks:
            task.cancel()
    except RuntimeError:
        pass  # No tasks to cancel


async def send_receive():
    print(
        "\nAllow your computer to use the microphone, then start talking. Control-C to stop."
    )
    print()

    spinner = spinning_cursor()
    async with websockets.connect(
        URL,
        extra_headers=[("Authorization", auth_key)],
        ping_interval=5,
        ping_timeout=20,
    ) as _ws:

        await asyncio.sleep(0.01)

        async def send():
            while True:

                try:
                    data = stream.read(FRAMES_PER_BUFFER)
                    buffer.append(data)  # so we can write audio out later
                    data = base64.b64encode(data).decode("utf-8")
                    json_data = json.dumps({"audio_data": str(data)})
                    await _ws.send(json_data)
                except websockets.exceptions.ConnectionClosedError as e:
                    print(e)
                    assert e.code == 4008
                    break
                except KeyboardInterrupt:
                    print("... cancelling")
                    await asyncio.sleep(1)
                    handle_cancel()
                except Exception as e:
                    assert False, "Not a websocket 4008 error"

                sys.stdout.write(next(spinner))
                sys.stdout.flush()
                await asyncio.sleep(0.1)
                sys.stdout.write("\b")
            return True

        async def receive():
            global buffer
            last_text = ""
            i = 0
            while True:
                try:
                    result_str = await _ws.recv()
                    result_json = json.loads(result_str)
                    text = result_json.get("text", "")

                    if not text:
                        continue

                    if result_json.get("message_type") == "FinalTranscript":
                        i += 1
                        sys.stdout.write("\b")
                        print(80 * "=")
                        print(text)
                        print(80 * "=")
                        filename = f"../public/assets/block_{i:04d}.json"
                        with open(filename, "w") as f:
                            f.write(result_str)

                        with wave.open(
                            f"../public/assets/__event_audio.wav", "wb"
                        ) as f:
                            f.setnchannels(CHANNELS)
                            f.setsampwidth(p.get_sample_size(FORMAT))
                            f.setframerate(SAMPLE_RATE)
                            f.writeframes(b"".join(buffer))
                    else:
                        if text and text != last_text:
                            sys.stdout.write("\b")
                            print(f"... {text}")

                    # Keep track of last text, otherwise, we'll just be reprinting an identical
                    # in-progress translation line during moments of silence.
                    last_text = text

                except websockets.exceptions.ConnectionClosedError as e:
                    print(e)
                    assert e.code == 4008
                    break
                except KeyboardInterrupt:
                    print("... cancelling")
                    await asyncio.sleep(1)
                    handle_cancel()
                except Exception as e:
                    assert False, "Not a websocket 4008 error"

        await asyncio.gather(send(), receive())


if __name__ == "__main__":

    try:
        asyncio.run(send_receive())
    except (KeyboardInterrupt, asyncio.exceptions.CancelledError):
        print("... cancelling [main]")
        handle_cancel()
        print("\nThanks for recording with us.")
        sys.exit(0)
